// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_INPUT_INPUT_H_
#define FLATBUFFERS_GENERATED_INPUT_INPUT_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

namespace Input {

struct PlayerInput;
struct PlayerInputBuilder;

struct PlayerInput FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PlayerInputBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_INPUT = 4
  };
  const ::flatbuffers::String *input() const {
    return GetPointer<const ::flatbuffers::String *>(VT_INPUT);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_INPUT) &&
           verifier.VerifyString(input()) &&
           verifier.EndTable();
  }
};

struct PlayerInputBuilder {
  typedef PlayerInput Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_input(::flatbuffers::Offset<::flatbuffers::String> input) {
    fbb_.AddOffset(PlayerInput::VT_INPUT, input);
  }
  explicit PlayerInputBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PlayerInput> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PlayerInput>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PlayerInput> CreatePlayerInput(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> input = 0) {
  PlayerInputBuilder builder_(_fbb);
  builder_.add_input(input);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<PlayerInput> CreatePlayerInputDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *input = nullptr) {
  auto input__ = input ? _fbb.CreateString(input) : 0;
  return Input::CreatePlayerInput(
      _fbb,
      input__);
}

inline const Input::PlayerInput *GetPlayerInput(const void *buf) {
  return ::flatbuffers::GetRoot<Input::PlayerInput>(buf);
}

inline const Input::PlayerInput *GetSizePrefixedPlayerInput(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<Input::PlayerInput>(buf);
}

inline bool VerifyPlayerInputBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Input::PlayerInput>(nullptr);
}

inline bool VerifySizePrefixedPlayerInputBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Input::PlayerInput>(nullptr);
}

inline void FinishPlayerInputBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Input::PlayerInput> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedPlayerInputBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Input::PlayerInput> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Input

#endif  // FLATBUFFERS_GENERATED_INPUT_INPUT_H_
